# This is a comment.
# syntax-documentation:
#  - https://packaging.python.org/en/latest/guides/writing-pyproject-toml/
#
# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python. Multiline strings are treated as
# verbose regular expressions by Black. Use [ ] to denote a significant space
# character.
#
#   > just install
#   > uv sync
#   > uv sync --all-groups
#   > uv sync --with <groupname>


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "autoread_dotenv"
version = "1.0.3"
description = "Automatically set env-vars at the beginning of every python-process in your in-project virtualenv."
readme = "docs/readme.md"
authors = [{ name = "Wouter Vanden Hove", email = "wouter@libranet.eu" }]
maintainers = [{ name = "Wouter Vanden Hove", email = "wouter@libranet.eu" }]
requires-python = ">=3.8"
license = { file = "license.md" }
keywords = ["entrypoints", "dotenv", "sitecustomize"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Typing :: Typed",
]
dependencies = [
    "python-dotenv>=1.0.0",
    "sitecustomize-entrypoints>=1.1.0",
]

[dependency-groups]

dev = [
    "autoread-dotenv>=1.0.3",
    "pylint>=3.1.0",
    "ruff>=0.8.6",
]
ipython = [
    "ipython>=8.0",
    "rich>=13.9.4",
]
packaging = [
    "pyroma>=4.2",
]
pre-commit = [
    "pre-commit>=3.5",  # 3.5 still supports python3.8
    "pre-commit-hooks>=5.0.0",
]
testing = [
    "pytest>=8.1.1",
    "pytest-clarity>=1.0",
    "pytest-cov>=5.0.0",
    "pytest-dotenv>=0.5.2",
]
typing = [
    "mypy>=1.14.1",
]

# https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#advanced-plugins
# https://github.com/Darsstar/sitecustomize-entrypoints/blob/main/src/sitecustomize/__init__.py
[project.entry-points.sitecustomize]
autoread_dotenv = "autoread_dotenv:entrypoint"


[project.urls]
homepage = "https://github.com/libranet/autoread-dotenv"
repository = "https://github.com/libranet/autoread-dotenv"
documentation = "https://autoread-dotenv.readthedocs.io"


[tool.coverage.html]
directory = "var/html/coverage"

[tool.coverage.xml]
output = "var/html/coverage/coverage.xml"

[tool.coverage.report]
# cfr. https://coverage.readthedocs.io/en/coverage-4.2/excluding.html
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
include = ["src/*"]

[tool.coverage.run]
branch = true
data_file = "var/cache/coverage/coverage.db"


[tool.hatch]
# https://hatch.pypa.io/latest/

[tool.hatch.build]
#ignore-gitignore = true  # ignore .gitignore
# include = [  # include only these files
#     "src/**/",
#     "docs/**",
#     "license.md",
#     "pyproject.toml",
# ]
# exclude = [
#     # "src/**/__pycache__/**",
#     # "src/**/*.pyc",
#     ".just/**",
#     ".vscode/**",
#     "*.lock",
#     ".env",
#     ".env.*",
#     ".gitignore",
#     ".pre-commit-config.yaml",
#     ".python-version",
#     "etc/**",
#     "justfile",
#     "scripts/**",
#     "tests/**",
#     "todo.md",
# ]


[tool.mypy]
# cfr https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
cache_dir = "var/cache/mypy"
check_untyped_defs = true
exclude = "^bin/"
ignore_missing_imports = true
mypy_path = ["src"]


[tool.pylint.design]
# complete pylint-config, see https://github.com/PyCQA/pylint/blob/main/pylintrc
exclude-too-few-public-methods = []
max-attributes = 11  # default is 11

[tool.pylint.format]
max-line-length = 120
good-names = [
    "i", # counter in loop
]
max-args = 5 # default is 5

[tool.pylint.messages_control]
disable = [
    # wontfix
    # "W1203",  # logging-fstring-interpolation
    # "fixme",  # Disable reporting of TODO, FIXME, and XXX comments
]


[tool.pytest.ini_options]
cache_dir = "var/cache/pytest"
log_cli = false  # enable to show log-output
log_cli_level = "NOTSET"
filterwarnings = []
markers = [  # avoid warnings about unregistered markers
    "unit",
    "integration",
    "slow",
]
testpaths = ["tests"]
# addopts = "--color=yes --report-dir='var/coverage/html'"
# report-dir = "var/cache/coverage"


[tool.ruff]
# https://beta.ruff.rs/docs/configuration/
# https://docs.astral.sh/ruff/configuration/#using-pyprojecttoml
cache-dir = "var/cache/ruff" # relative to project_root
line-length = 120

[tool.ruff.lint]
ignore = [
    # D203 conflicts withs D211
    "D203", # 1 blank line required before class docstring
    # "D211", # No blank lines allowed before class docstring

    # D212 conflicts with D213
    "D212",    # Multi-line docstring summary should start at the first line
    # "D213",  # Multi-line docstring summary should start at the second line

    # conflicts with 'ruff format'
    "COM812",  # Trailing comma missing
    "ISC001",  # Implicitly concatenated string literals on one line

    # style preferences - wontfix
    "G004",    # Logging statement uses f-string
    "G201",    # Logging .exception(...) should be used instead of .error(..., exc_info=True)
    "RET504",  # Unnecessary assignment before `return` statement
    "TRY400",  # Use `logging.exception` instead of `logging.error`

    # TODO: fix all these warnings below
    "A005",    # Module `logging` shadows a Python standard-library module
    "ANN001",  # Missing type annotation for function argument
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN202",  # Missing return type annotation for private function
    "ANN201",  # Missing return type annotation for public function
    "ANN204",  # Missing return type annotation for special method
    "ANN205",  # Missing return type annotation for staticmethod
    "ANN206",  # Missing return type annotation for classmethod
    "ARG001",  # Unused function argument: `model_sample_py`
    "ARG002",  # Unused method argument: `sampling_period`
    "ARG003",  # Unused class method argument: `data`
    "B008",    # Do not perform function call `Auto` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    "C417",    # Unnecessary `map()` usage (rewrite using a list comprehension)
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D105",    # Missing docstring in magic method
    "D100",    # Missing docstring in public module
    "DTZ007",  # Naive datetime constructed using `datetime.datetime.strptime()` without %z
    "D107",    # Missing docstring in `__init__`
    "DTZ001",  # `datetime.datetime()` called without a `tzinfo` argument
    "E501",    # Line too long (126 > 120)
    "F841",    # Local variable `ad_build_model_dataset` is assigned to but never used
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean positional value in function call
    "N805",    # First argument of a method should be named `self`
    "PLR2004", # Magic value used in comparison, consider replacing `2` with a constant variable
    "PLR0912", # Too many branches (18 > 12)
    "PLR0913", # Too many arguments in function definition
    "SLF001",  # Private member accessed: `_automatic_sensitivity`
    "TRY003",  # Avoid specifying long messages outside the exception class
]

select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "PERF",  # perflint
    "PIE",   # flake8-pie
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # ruff-specific rules
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "TC",    # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]


[tool.ruff.lint.isort]
# https://docs.astral.sh/ruff/settings/#lintisort
combine-as-imports = true
force-single-line = false
from-first = false
known-third-party = []
known-first-party = ["autoread_dotenv"]
known-local-folder = ["_helpers"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["INP001"]  # tests-dir should not be a python-package


[tool.uv]
managed = true
package = true
default-groups = [
    # "dev",
    # "ipython",
    # "jupyter",
    # "pre-commit",
    # "testing",
    # "typing",
]
